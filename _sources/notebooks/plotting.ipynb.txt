{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the modules and set the matplotlib style\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a (non)weighted sample\n",
    "Use the function \"errorbar_hist\" to plot the same sample without and with weights. In the non-weighted case, the errors are considered poissonian, so one can see asymmetric error bars for low values of the number of entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe21c4d0fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "size = 1000\n",
    "smp  = np.random.normal(0, 3, size)\n",
    "wgts = np.random.uniform(0, 1, size)\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "\n",
    "# Make the non-weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, rg=(-7, 7))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax0.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax0.set_title('Non-weighted sample')\n",
    "\n",
    "# Make the weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, rg=(-7, 7), wgts=wgts)\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax1.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax1.set_title('Weighted sample');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the pull of a distribution\n",
    "Sometimes we want to calculate the distance in terms of standard deviations from a curve to our measurements. This example creates a random sample of events following a normal distribution and overlies it with the original curve. The pull plot is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe25275c310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the samples\n",
    "size=5e3\n",
    "\n",
    "sample = norm.rvs(size=int(size))\n",
    "\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(sample, 40, rg=(-4, 4))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "# Extract the PDF values in each center, and make the pull\n",
    "ref  = norm.pdf(centers)\n",
    "ref *= size/ref.sum()\n",
    "\n",
    "pull, perr = hep_spt.pull(values, ey, ref)\n",
    "\n",
    "# Make the reference to plot (with more points than just the centers of the bins)\n",
    "rct, step = np.linspace(-4., 4., 1000, retstep=True)\n",
    "pref = norm.pdf(rct)\n",
    "pref = size*pref/pref.sum()*(edges[1] - edges[0])/step\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, gridspec_kw = {'height_ratios':[3, 1]})\n",
    "\n",
    "# Draw the histogram and the reference\n",
    "ax0.errorbar(centers, values, ey, ex, color='k', ls='none', label='data')\n",
    "ax0.plot(rct, pref, color='blue', marker='', label='reference')\n",
    "ax0.set_xlim(-4., 4.)\n",
    "ax0.set_ylabel('Entries')\n",
    "ax0.legend()\n",
    "\n",
    "# Draw the pull and lines for -3, 0 and +3 standard deviations\n",
    "add_pull_line = lambda v, c: ax1.plot([-4., 4.], [v, v], color=c, marker='')\n",
    "\n",
    "add_pull_line(0, 'blue')\n",
    "add_pull_line(-3, 'red')\n",
    "add_pull_line(+3, 'red')\n",
    "\n",
    "ax1.errorbar(centers, pull, perr, ex, color='k', ls='none')\n",
    "ax1.set_ylim(-4, 4)\n",
    "ax1.set_yticks([-3, 0, 3])\n",
    "ax1.set_ylabel('Pull');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting efficiencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's suppose we build two histograms from the same sample, one of them after having applied some  requirements. The first histogram will follow a gaussian distribution with center at 0 and standard deviation equal to 2, with 1000 entries. The second, with only 100 entries, will have the same center but the standard deviation will be 0.5. The efficiency plot would be calculated as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe21c4db4d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "raw = np.random.normal(0, 2, 1000)\n",
    "cut = np.random.normal(0, 0.5, 100)\n",
    "\n",
    "# Create the histograms (we do not care about the errors for the moment). Note that the two\n",
    "# histograms have the same number of bins and range.\n",
    "h_raw, edges = np.histogram(raw, bins=10, range=(-2, 2))\n",
    "h_cut, _     = np.histogram(cut, bins=10, range=(-2, 2))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ex = (edges[1:] - edges[:-1])/2.\n",
    "\n",
    "# Calculate the efficiency and the errors\n",
    "eff = h_cut.astype(float)/h_raw\n",
    "ey  = hep_spt.cp_fu(h_cut, h_raw)\n",
    "\n",
    "plt.errorbar(centers, eff, ey, ex, ls='none');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
