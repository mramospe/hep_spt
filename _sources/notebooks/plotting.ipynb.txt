{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the modules and set the matplotlib style\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a (non)weighted sample\n",
    "Use the function \"errorbar_hist\" to plot the same sample without and with weights. In the non-weighted case, the errors are considered poissonian, so one can see asymmetric error bars for low values of the number of entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fcbc4a5c1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "size = 1000\n",
    "smp  = np.random.normal(0, 3, size)\n",
    "wgts = np.random.uniform(0, 1, size)\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "\n",
    "# Make the non-weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, rg=(-7, 7))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax0.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax0.set_title('Non-weighted sample')\n",
    "\n",
    "# Make the weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, rg=(-7, 7), wgts=wgts)\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax1.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax1.set_title('Weighted sample');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the pull of a distribution\n",
    "Sometimes we want to calculate the distance in terms of standard deviations from a curve to our measurements. This example creates a random sample of events following a normal distribution and overlies it with the original curve. The pull plot is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fcbfaebc2d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the samples\n",
    "size=5e3\n",
    "\n",
    "sample = norm.rvs(size=int(size))\n",
    "\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(sample, 40, rg=(-4, 4))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "# Extract the PDF values in each center, and make the pull\n",
    "ref  = norm.pdf(centers)\n",
    "ref *= size/ref.sum()\n",
    "\n",
    "pull, perr = hep_spt.pull(values, ey, ref)\n",
    "\n",
    "# Make the reference to plot (with more points than just the centers of the bins)\n",
    "rct, step = np.linspace(-4., 4., 1000, retstep=True)\n",
    "pref = norm.pdf(rct)\n",
    "pref = size*pref/pref.sum()*(edges[1] - edges[0])/step\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, gridspec_kw = {'height_ratios':[3, 1]})\n",
    "\n",
    "# Draw the histogram and the reference\n",
    "ax0.errorbar(centers, values, ey, ex, color='k', ls='none', label='data')\n",
    "ax0.plot(rct, pref, color='blue', marker='', label='reference')\n",
    "ax0.set_xlim(-4., 4.)\n",
    "ax0.set_ylabel('Entries')\n",
    "ax0.legend()\n",
    "\n",
    "# Draw the pull and lines for -3, 0 and +3 standard deviations\n",
    "add_pull_line = lambda v, c: ax1.plot([-4., 4.], [v, v], color=c, marker='')\n",
    "\n",
    "add_pull_line(0, 'blue')\n",
    "add_pull_line(-3, 'red')\n",
    "add_pull_line(+3, 'red')\n",
    "\n",
    "ax1.errorbar(centers, pull, perr, ex, color='k', ls='none')\n",
    "ax1.set_ylim(-4, 4)\n",
    "ax1.set_yticks([-3, 0, 3])\n",
    "ax1.set_ylabel('Pull');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
