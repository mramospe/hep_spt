{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the modules and set the matplotlib style\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a (non)weighted sample\n",
    "Use the function \"errorbar_hist\" to plot the same sample without and with weights. In the non-weighted case, the errors are considered poissonian, so one can see asymmetric error bars for low values of the number of entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fdfe743e050>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "size = 200\n",
    "smp  = np.random.normal(0, 3, size)\n",
    "wgts = np.random.uniform(0, 1, size)\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "\n",
    "# Make the non-weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, bins=10, rg=(-7, 7))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax0.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax0.set_title('Non-weighted sample')\n",
    "\n",
    "# Make the weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, bins=10, rg=(-7, 7), wgts=wgts)\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax1.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax1.set_title('Weighted sample');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the pull of a distribution\n",
    "Sometimes we want to calculate the distance in terms of standard deviations from a curve to our measurements. This example creates a random sample of events following a normal distribution and overlies it with the original curve. The pull plot is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe01d6bc2d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the samples\n",
    "size=5e3\n",
    "\n",
    "sample = norm.rvs(size=int(size))\n",
    "\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(sample, 40, rg=(-4, 4))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "# Extract the PDF values in each center, and make the pull\n",
    "ref  = norm.pdf(centers)\n",
    "ref *= size/ref.sum()\n",
    "\n",
    "pull, perr = hep_spt.pull(values, ey, ref)\n",
    "\n",
    "# Make the reference to plot (with more points than just the centers of the bins)\n",
    "rct, step = np.linspace(-4., 4., 1000, retstep=True)\n",
    "pref = norm.pdf(rct)\n",
    "pref = size*pref/pref.sum()*(edges[1] - edges[0])/step\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, gridspec_kw = {'height_ratios':[3, 1]})\n",
    "\n",
    "# Draw the histogram and the reference\n",
    "ax0.errorbar(centers, values, ey, ex, color='k', ls='none', label='data')\n",
    "ax0.plot(rct, pref, color='blue', marker='', label='reference')\n",
    "ax0.set_xlim(-4., 4.)\n",
    "ax0.set_ylabel('Entries')\n",
    "ax0.legend()\n",
    "\n",
    "# Draw the pull and lines for -3, 0 and +3 standard deviations\n",
    "add_pull_line = lambda v, c: ax1.plot([-4., 4.], [v, v], color=c, marker='')\n",
    "\n",
    "add_pull_line(0, 'blue')\n",
    "add_pull_line(-3, 'red')\n",
    "add_pull_line(+3, 'red')\n",
    "\n",
    "ax1.errorbar(centers, pull, perr, ex, color='k', ls='none')\n",
    "ax1.set_ylim(-4, 4)\n",
    "ax1.set_yticks([-3, 0, 3])\n",
    "ax1.set_ylabel('Pull');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting efficiencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's suppose we build two histograms from the same sample, one of them after having applied some  requirements. The first histogram will follow a gaussian distribution with center at 0 and standard deviation equal to 2, with 1000 entries. The second, with only 100 entries, will have the same center but the standard deviation will be 0.5. The efficiency plot would be calculated as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fdfe4f21990>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "raw = np.random.normal(0, 2, 1000)\n",
    "cut = np.random.normal(0, 0.5, 100)\n",
    "\n",
    "# Create the histograms (we do not care about the errors for the moment). Note that the two\n",
    "# histograms have the same number of bins and range.\n",
    "h_raw, edges = np.histogram(raw, bins=10, range=(-2, 2))\n",
    "h_cut, _     = np.histogram(cut, bins=10, range=(-2, 2))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ex = (edges[1:] - edges[:-1])/2.\n",
    "\n",
    "# Calculate the efficiency and the errors\n",
    "eff = h_cut.astype(float)/h_raw\n",
    "ey  = hep_spt.cp_fu(h_cut, h_raw)\n",
    "\n",
    "plt.errorbar(centers, eff, ey, ex, ls='none');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
