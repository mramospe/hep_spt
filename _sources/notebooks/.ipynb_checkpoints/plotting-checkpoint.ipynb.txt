{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the modules and set the matplotlib style\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a (non)weighted sample\n",
    "Use the function \"errorbar_hist\" to plot the same sample without and with weights. In the non-weighted case, the errors are considered poissonian, so one can see asymmetric error bars for low values of the number of entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6f8131ee90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "size = 100\n",
    "smp  = np.random.normal(0, 3, size)\n",
    "wgts = np.random.uniform(0, 1, size)\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "\n",
    "# Make the non-weighted plot\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax0.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax0.set_title('Non-weighted sample')\n",
    "\n",
    "# Make the weighted plot\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(smp, bins=10, rg=(-7, 7), wgts=wgts)\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ax1.errorbar(centers, values, ey, ex, ls='none')\n",
    "ax1.set_title('Weighted sample');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the pull of a distribution\n",
    "Sometimes we want to calculate the distance in terms of standard deviations from a curve to our measurements. This example creates a random sample of events following a normal distribution and overlies it with the original curve. The pull plot is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6fb758d2d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the samples\n",
    "size=5e3\n",
    "\n",
    "sample = norm.rvs(size=int(size))\n",
    "\n",
    "values, edges, ex, ey = hep_spt.errorbar_hist(sample, 40, rg=(-4, 4))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "# Extract the PDF values in each center, and make the pull\n",
    "ref  = norm.pdf(centers)\n",
    "ref *= size/ref.sum()\n",
    "\n",
    "pull, perr = hep_spt.pull(values, ey, ref)\n",
    "\n",
    "# Make the reference to plot (with more points than just the centers of the bins)\n",
    "rct, step = np.linspace(-4., 4., 1000, retstep=True)\n",
    "pref = norm.pdf(rct)\n",
    "pref = size*pref/pref.sum()*(edges[1] - edges[0])/step\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, gridspec_kw = {'height_ratios':[3, 1]})\n",
    "\n",
    "# Draw the histogram and the reference\n",
    "ax0.errorbar(centers, values, ey, ex, color='k', ls='none', label='data')\n",
    "ax0.plot(rct, pref, color='blue', marker='', label='reference')\n",
    "ax0.set_xlim(-4., 4.)\n",
    "ax0.set_ylabel('Entries')\n",
    "ax0.legend()\n",
    "\n",
    "# Draw the pull and lines for -3, 0 and +3 standard deviations\n",
    "add_pull_line = lambda v, c: ax1.plot([-4., 4.], [v, v], color=c, marker='')\n",
    "\n",
    "add_pull_line(0, 'blue')\n",
    "add_pull_line(-3, 'red')\n",
    "add_pull_line(+3, 'red')\n",
    "\n",
    "ax1.errorbar(centers, pull, perr, ex, color='k', ls='none')\n",
    "ax1.set_ylim(-4, 4)\n",
    "ax1.set_yticks([-3, 0, 3])\n",
    "ax1.set_ylabel('Pull');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting efficiencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's suppose we build two histograms from the same sample, one of them after having applied some  requirements. The first histogram will follow a gaussian distribution with center at 0 and standard deviation equal to 2, with 1000 entries. The second, with only 100 entries, will have the same center but the standard deviation will be 0.5. The efficiency plot would be calculated as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6f8131e1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a random sample\n",
    "raw = np.random.normal(0, 2, 1000)\n",
    "cut = np.random.normal(0, 0.5, 100)\n",
    "\n",
    "# Create the histograms (we do not care about the errors for the moment). Note that the two\n",
    "# histograms have the same number of bins and range.\n",
    "h_raw, edges = np.histogram(raw, bins=10, range=(-2, 2))\n",
    "h_cut, _     = np.histogram(cut, bins=10, range=(-2, 2))\n",
    "centers = (edges[1:] + edges[:-1])/2.\n",
    "\n",
    "ex = (edges[1:] - edges[:-1])/2.\n",
    "\n",
    "# Calculate the efficiency and the errors\n",
    "eff = h_cut.astype(float)/h_raw\n",
    "ey  = hep_spt.cp_fu(h_cut, h_raw)\n",
    "\n",
    "plt.errorbar(centers, eff, ey, ex, ls='none');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
