{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Statistical tools\n",
    "This package provides functions and classes to solve several statistical problems in High Energy Physics. Here, we will see how to calculate uncertainties for poissonian values. Some other classes, focused on handling probability density functions are also discussed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Uncertainties on poissonian values\n",
    "There are several options for calculating poissonian uncertainties, depending if one follows a bayesian of frequentist approach. Here, we will take a look at the frequentist uncertainties and to the method based on the differential of the logarithm of likelihood, comparing them to the standard rule of $\\sqrt{n}$, which is only valid when the central limit theorem applies to our values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "value = 4\n",
    "\n",
    "# Frequentist\n",
    "fu_l, fu_h = hep_spt.poisson_fu(value)\n",
    "# Differential logarithm of likelihood\n",
    "du_l, du_h = hep_spt.poisson_llu(value)\n",
    "# Usual approach sqrt(n)\n",
    "su = math.sqrt(value)\n",
    "\n",
    "# Plot the results\n",
    "errs = np.array([(fu_l, fu_h), (du_l, du_h), (su, su)])\n",
    "\n",
    "x = np.arange(1, len(errs) + 1)\n",
    "y = value*np.ones(len(errs))\n",
    "\n",
    "plt.errorbar(x, y, yerr=errs.T, ls='none', marker='o');\n",
    "plt.xticks(x, ['Frequentist', 'DLL', '$\\sqrt{n}$']);\n",
    "plt.gca().set_xlim([0, len(errs) + 1]);\n",
    "plt.gca().set_ylim([0, 8]);\n",
    "\n",
    "for ix, iy, (l, h) in zip(x, y, errs):\n",
    "    plt.gca().annotate('-{:.2f}'.format(l), (ix - 0.25, iy - 0.5), rotation=90, va='top')\n",
    "    plt.gca().annotate('+{:.2f}'.format(h), (ix - 0.25, iy + 0.5), rotation=90, va='bottom')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The FlatDistTransform class\n",
    "The class FlatDistTransform allows to build a method to use the inverse transform sampling theorem to transform values following a certain distribution into anothers following a flat distribution. Let's consider two different normal distributions, corresponding to two different types of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "smp_a = np.random.normal(100, 5, 10000)\n",
    "smp_b = np.random.normal(80, 20, 10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's create the FlatDistTransform object, and transform the two samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "trf = hep_spt.FlatDistTransform(smp_a)\n",
    "\n",
    "t_a = trf.transform(smp_a)\n",
    "t_b = trf.transform(smp_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The transform of \"smp_a\" should follow a flat distribution. Let's plot the results to check it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(10, 5))\n",
    "ax0, ax1 = f.subplots(1, 2)\n",
    "\n",
    "cm = {'bins': 40, 'histtype': 'step'}\n",
    "\n",
    "cm.update({'range': (10, 150)})\n",
    "ax0.hist(smp_a, color='blue', **cm);\n",
    "ax0.hist(smp_b, color='red', **cm);\n",
    "ax0.set_title('Original');\n",
    "\n",
    "cm.update({'range': (0, 1)})\n",
    "ax1.hist(t_a, color='blue', **cm);\n",
    "ax1.hist(t_b, color='red', **cm);\n",
    "ax1.set_title('Transformation');\n",
    "ax1.set_yscale('log', nonposy='clip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
