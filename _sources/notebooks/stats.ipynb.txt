{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Statistical tools\n",
    "This package provides functions and classes to solve several statistical problems in High Energy Physics. Here, we will see how to calculate uncertainties for poissonian values. Some other classes, focused on handling probability density functions are also discussed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the modules and set the matplotlib style\n",
    "import hep_spt\n",
    "hep_spt.set_style()\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Uncertainties on poissonian values\n",
    "There are several options for calculating poissonian uncertainties, depending if one follows a bayesian of frequentist approach. Here, we will take a look at the frequentist uncertainties and to the method based on the differential of the logarithm of likelihood, comparing them to the standard rule of $\\sqrt{n}$, which is only valid when the central limit theorem applies to our values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2068de7350>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "value = 4\n",
    "\n",
    "# Frequentist\n",
    "fu_l, fu_h = hep_spt.poisson_fu(value)\n",
    "# Differential logarithm of likelihood\n",
    "du_l, du_h = hep_spt.poisson_llu(value)\n",
    "# Usual approach sqrt(n)\n",
    "su = math.sqrt(value)\n",
    "\n",
    "# Plot the results\n",
    "errs = np.array([(fu_l, fu_h), (du_l, du_h), (su, su)])\n",
    "\n",
    "x = np.arange(1, len(errs) + 1)\n",
    "y = value*np.ones(len(errs))\n",
    "\n",
    "plt.errorbar(x, y, yerr=errs.T, ls='none', marker='o');\n",
    "plt.xticks(x, ['Frequentist', 'DLL', '$\\sqrt{n}$']);\n",
    "plt.gca().set_xlim([0, len(errs) + 1]);\n",
    "plt.gca().set_ylim([0, 8]);\n",
    "\n",
    "for ix, iy, (l, h) in zip(x, y, errs):\n",
    "    plt.gca().annotate('-{:.2f}'.format(l), (ix - 0.25, iy - 0.5), rotation=90, va='top')\n",
    "    plt.gca().annotate('+{:.2f}'.format(h), (ix - 0.25, iy + 0.5), rotation=90, va='bottom')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The FlatDistTransform class\n",
    "The class FlatDistTransform allows to build a method to use the inverse transform sampling theorem to transform values following a certain distribution into anothers following a flat distribution. Let's consider two different normal distributions, corresponding to two different types of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "smp_a = np.random.normal(100, 5, 10000)\n",
    "smp_b = np.random.normal(80, 20, 10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's create the FlatDistTransform object, and transform the two samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "trf = hep_spt.FlatDistTransform(smp_a)\n",
    "\n",
    "t_a = trf.transform(smp_a)\n",
    "t_b = trf.transform(smp_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The transform of \"smp_a\" should follow a flat distribution. Let's plot the results to check it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f203069fd90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, (ax0, ax1) = plt.subplots(1, 2)\n",
    "\n",
    "cm = {'bins': 40, 'histtype': 'step'}\n",
    "\n",
    "cm.update({'range': (10, 150)})\n",
    "ax0.hist(smp_a, color='blue', **cm);\n",
    "ax0.hist(smp_b, color='red', **cm);\n",
    "ax0.set_title('Original');\n",
    "\n",
    "cm.update({'range': (0, 1)})\n",
    "ax1.hist(t_a, color='blue', **cm);\n",
    "ax1.hist(t_b, color='red', **cm);\n",
    "ax1.set_title('Transformation');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
